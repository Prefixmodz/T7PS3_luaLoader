// initializer_list standard header (core)

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _INITIALIZER_LIST_
#define _INITIALIZER_LIST_
#include <cstddef>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
#pragma push_macro("new")
#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
#pragma push_macro("new")
#undef new
_STD_BEGIN
// TEMPLATE CLASS initializer_list
template<class _Elem>
class initializer_list
{	// list of pointers to elements
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	initializer_list() noexcept
		: _First(0), _Last(0)
	{	// empty list
	}

	initializer_list(const _Elem* _First_arg,
		const _Elem* _Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
	{	// construct with pointers
	}

	const _Elem* begin() const noexcept
	{	// get beginning of list
		return (_First);
	}

	const _Elem* end() const noexcept
	{	// get end of list
		return (_Last);
	}

	size_t size() const noexcept
	{	// get length of list
		return ((size_t)(_Last - _First));
	}
	
	//operator std::vector<_Elem>()
	//{
	//	std::vector<_Elem> data;
	//	for (int i = 0; i < this->size(); i++)
	//		data.push_back(this->begin()[i]);
	//}

private:
	const _Elem* _First;
	const _Elem* _Last;
};

// TEMPLATE FUNCTION begin
template<class _Elem> inline
const _Elem* begin(initializer_list<_Elem> _Ilist) noexcept
{	// get beginning of sequence
	return (_Ilist.begin());
}

// TEMPLATE FUNCTION end
template<class _Elem> inline
const _Elem* end(initializer_list<_Elem> _Ilist) noexcept
{	// get end of sequence
	return (_Ilist.end());
}
_STD_END

#pragma pop_macro("new")
#pragma warning(pop)
#pragma pack(pop)
#endif /* RC_INVOKED */